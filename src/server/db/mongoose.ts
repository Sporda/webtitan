import mongoose from "mongoose";

// Pro skripty - naƒçten√≠ .env pokud nen√≠ naƒçten√Ω
if (!process.env.MONGODB_URI && !process.env.VERCEL) {
  try {
    require("dotenv").config();
  } catch (e) {
    // dotenv nen√≠ dostupn√©, pokraƒçujeme
  }
}

declare global {
  // eslint-disable-next-line no-var
  var mongooseConnection:
    | {
        conn: typeof mongoose | null;
        promise: Promise<typeof mongoose> | null;
      }
    | undefined;
}

// P≈ô√≠mo pou≈æ√≠v√°me process.env.MONGODB_URI pro vyhnut√≠ se probl√©m≈Øm s env.js na serveru
const MONGODB_URI = process.env.MONGODB_URI;

// Zkontrolujeme pouze pokud to nen√≠ build proces
function checkMongoDBURI() {
  if (!process.env.MONGODB_URI) {
    // Debug info pouze v development
    if (process.env.NODE_ENV === "development") {
      console.log("üîç Debug MongoDB URI:");
      console.log(`   NODE_ENV: ${process.env.NODE_ENV}`);
      console.log(`   MONGODB_URI exists: ${!!process.env.MONGODB_URI}`);
      console.log(
        `   Prvn√≠ 20 znak≈Ø: ${process.env.MONGODB_URI?.substring(0, 20) || "N/A"}...`,
      );
    }

    console.error("‚ùå CHYBA: MONGODB_URI nen√≠ nastaven√©!");
    console.error(
      "üí° Nastavte MONGODB_URI environment promƒõnnou v .env souboru",
    );
    console.error(
      "üí° P≈ô√≠klad: MONGODB_URI=mongodb+srv://user:pass@cluster.mongodb.net/dbname",
    );

    throw new Error("MONGODB_URI environment promƒõnn√° nen√≠ nastaven√°");
  }
  return process.env.MONGODB_URI;
}

// Ovƒõ≈ôen√≠ URI pouze pokud je dostupn√©
if (MONGODB_URI) {
  if (
    !MONGODB_URI.endsWith("/webtitan") &&
    !MONGODB_URI.includes("dbName=webtitan")
  ) {
    console.warn(`‚ö†Ô∏è  POZOR: MONGODB_URI nespecifikuje datab√°zi "webtitan"`);
    console.warn(`   Aktu√°ln√≠ URI: ${MONGODB_URI}`);
    console.warn(`   Doporuƒçen√©: mongodb://localhost:27017/webtitan`);
  }
}

let cached = global.mongooseConnection;

if (!cached) {
  cached = global.mongooseConnection = { conn: null, promise: null };
}

async function connectToMongoDB() {
  if (cached!.conn) {
    return cached!.conn;
  }

  if (!cached!.promise) {
    // Zkontrolujeme URI p≈ôi pokusu o p≈ôipojen√≠
    const uri = checkMongoDBURI();

    const opts = {
      bufferCommands: false,
      dbName: "webtitan", // EXPLICITN√ç nastaven√≠ datab√°ze
    };

    cached!.promise = mongoose.connect(uri, opts).then((mongoose) => {
      // Ovƒõ≈ôen√≠, ≈æe pou≈æ√≠v√°me spr√°vnou datab√°zi
      const dbName = mongoose.connection.db?.databaseName;
      if (dbName !== "webtitan") {
        throw new Error(
          `P≈ôipojeno k nespr√°vn√© datab√°zi: "${dbName}" m√≠sto "webtitan"`,
        );
      }

      // Log pouze v development
      if (process.env.NODE_ENV === "development") {
        console.log(`‚úÖ MongoDB p≈ôipojeno k datab√°zi: "${dbName}"`);
      }
      return mongoose;
    });
  }

  try {
    cached!.conn = await cached!.promise;
  } catch (e) {
    cached!.promise = null;
    throw e;
  }

  return cached!.conn;
}

export default connectToMongoDB;
